#pragma once

#include <appbase/application.hpp>
#include <koinos/plugins/chain/chain_plugin.hpp>
#include <koinos/pack/classes.hpp>
#include <koinos/crypto/elliptic.hpp>

#define KOINOS_BLOCK_PRODUCER_PLUGIN_NAME "block_producer"
#define KOINOS_BLOCK_TIME_MS              10000

const std::vector<char> DEMO_CONTRACT { 0,97,115,109,1,0,0,0,1,59,12,96,2,127,126,0,96,0,1,126,96,2,126,126,0,96,2,127,127,0,96,0,1,127,96,2,127,127,1,127,96,3,127,127,127,1,127,96,1,127,0,96,1,126,0,96,0,0,96,3,126,126,126,0,96,1,127,1,127,2,-112,1,8,3,101,110,118,16,97,99,116,105,111,110,95,100,97,116,97,95,115,105,122,101,0,4,3,101,110,118,12,99,117,114,114,101,110,116,95,116,105,109,101,0,1,3,101,110,118,12,101,111,115,105,111,95,97,115,115,101,114,116,0,3,3,101,110,118,6,109,101,109,99,112,121,0,6,3,101,110,118,6,112,114,105,110,116,110,0,8,3,101,110,118,6,112,114,105,110,116,115,0,7,3,101,110,118,16,114,101,97,100,95,97,99,116,105,111,110,95,100,97,116,97,0,5,3,101,110,118,13,114,101,113,117,105,114,101,95,97,117,116,104,50,0,2,3,15,14,5,5,5,4,7,10,0,5,6,11,5,11,7,9,4,5,1,112,1,2,2,5,3,1,0,1,7,-81,1,10,6,109,101,109,111,114,121,2,0,22,95,90,101,113,82,75,49,49,99,104,101,99,107,115,117,109,50,53,54,83,49,95,0,8,22,95,90,101,113,82,75,49,49,99,104,101,99,107,115,117,109,49,54,48,83,49,95,0,9,22,95,90,110,101,82,75,49,49,99,104,101,99,107,115,117,109,49,54,48,83,49,95,0,10,3,110,111,119,0,11,48,95,90,78,53,101,111,115,105,111,49,50,114,101,113,117,105,114,101,95,97,117,116,104,69,82,75,78,83,95,49,54,112,101,114,109,105,115,115,105,111,110,95,108,101,118,101,108,69,0,12,5,97,112,112,108,121,0,13,6,109,101,109,99,109,112,0,16,6,109,97,108,108,111,99,0,17,4,102,114,101,101,0,20,9,8,1,0,65,0,11,2,21,14,10,-50,18,14,11,0,32,0,32,1,65,32,16,16,69,11,11,0,32,0,32,1,65,32,16,16,69,11,13,0,32,0,32,1,65,32,16,16,65,0,71,11,10,0,16,1,66,-64,-124,61,-128,-89,11,14,0,32,0,41,3,0,32,0,41,3,8,16,7,11,-4,4,3,2,127,4,126,1,127,65,0,65,0,40,2,4,65,32,107,34,9,54,2,4,66,0,33,6,66,59,33,5,65,16,33,4,66,0,33,7,3,64,2,64,2,64,2,64,2,64,2,64,32,6,66,6,86,13,0,32,4,44,0,0,34,3,65,-97,127,106,65,-1,1,113,65,25,75,13,1,32,3,65,-91,1,106,33,3,12,2,11,66,0,33,8,32,6,66,11,88,13,2,12,3,11,32,3,65,-48,1,106,65,0,32,3,65,79,106,65,-1,1,113,65,5,73,27,33,3,11,32,3,-83,66,56,-122,66,56,-121,33,8,11,32,8,66,31,-125,32,5,66,-1,-1,-1,-1,15,-125,-122,33,8,11,32,4,65,1,106,33,4,32,6,66,1,124,33,6,32,8,32,7,-124,33,7,32,5,66,123,124,34,5,66,122,82,13,0,11,2,64,32,7,32,2,82,13,0,66,0,33,6,66,59,33,5,65,32,33,4,66,0,33,7,3,64,2,64,2,64,2,64,2,64,2,64,32,6,66,4,86,13,0,32,4,44,0,0,34,3,65,-97,127,106,65,-1,1,113,65,25,75,13,1,32,3,65,-91,1,106,33,3,12,2,11,66,0,33,8,32,6,66,11,88,13,2,12,3,11,32,3,65,-48,1,106,65,0,32,3,65,79,106,65,-1,1,113,65,5,73,27,33,3,11,32,3,-83,66,56,-122,66,56,-121,33,8,11,32,8,66,31,-125,32,5,66,-1,-1,-1,-1,15,-125,-122,33,8,11,32,4,65,1,106,33,4,32,6,66,1,124,33,6,32,8,32,7,-124,33,7,32,5,66,123,124,34,5,66,122,82,13,0,11,32,7,32,1,81,65,48,16,2,11,2,64,2,64,32,1,32,0,81,13,0,66,0,33,6,66,59,33,5,65,16,33,4,66,0,33,7,3,64,2,64,2,64,2,64,2,64,2,64,32,6,66,6,86,13,0,32,4,44,0,0,34,3,65,-97,127,106,65,-1,1,113,65,25,75,13,1,32,3,65,-91,1,106,33,3,12,2,11,66,0,33,8,32,6,66,11,88,13,2,12,3,11,32,3,65,-48,1,106,65,0,32,3,65,79,106,65,-1,1,113,65,5,73,27,33,3,11,32,3,-83,66,56,-122,66,56,-121,33,8,11,32,8,66,31,-125,32,5,66,-1,-1,-1,-1,15,-125,-122,33,8,11,32,4,65,1,106,33,4,32,6,66,1,124,33,6,32,8,32,7,-124,33,7,32,5,66,123,124,34,5,66,122,82,13,0,11,32,7,32,2,82,13,1,11,32,9,32,0,55,3,24,32,2,66,-128,-128,-128,-128,-128,-128,-128,-64,-21,0,82,13,0,32,9,65,0,54,2,20,32,9,65,1,54,2,16,32,9,32,9,41,3,16,55,2,8,32,9,65,24,106,32,9,65,8,106,16,15,26,11,65,0,32,9,65,32,106,54,2,4,11,11,0,65,-128,1,16,5,32,1,16,4,11,-43,1,3,1,127,1,126,3,127,65,0,40,2,4,65,16,107,34,4,33,6,65,0,32,4,54,2,4,32,1,40,2,4,33,2,32,1,40,2,0,33,5,2,64,2,64,2,64,2,64,16,0,34,1,69,13,0,32,1,65,-127,4,73,13,1,32,1,16,17,33,4,12,2,11,65,0,33,4,12,2,11,65,0,32,4,32,1,65,15,106,65,112,113,107,34,4,54,2,4,11,32,4,32,1,16,6,26,11,32,6,66,0,55,3,8,32,1,65,7,75,65,-16,0,16,2,32,6,65,8,106,32,4,65,8,16,3,26,32,6,41,3,8,33,3,2,64,32,1,65,-127,4,73,13,0,32,4,16,20,11,32,0,32,2,65,1,117,106,33,1,2,64,32,2,65,1,113,69,13,0,32,1,40,2,0,32,5,106,40,2,0,33,5,11,32,1,32,3,32,5,17,0,0,65,0,32,6,65,16,106,54,2,4,65,1,11,73,1,3,127,65,0,33,5,2,64,32,2,69,13,0,2,64,3,64,32,0,45,0,0,34,3,32,1,45,0,0,34,4,71,13,1,32,1,65,1,106,33,1,32,0,65,1,106,33,0,32,2,65,127,106,34,2,13,0,12,2,11,11,32,3,32,4,107,33,5,11,32,5,11,9,0,65,-120,1,32,0,16,18,11,-51,4,1,12,127,2,64,32,1,69,13,0,2,64,32,0,40,2,-64,65,34,13,13,0,65,16,33,13,32,0,65,-64,-63,0,106,65,16,54,2,0,11,32,1,65,8,106,32,1,65,4,106,65,7,113,34,2,107,32,1,32,2,27,33,2,2,64,2,64,2,64,32,0,40,2,-60,65,34,10,32,13,79,13,0,32,0,32,10,65,12,108,106,65,-128,-64,0,106,33,1,2,64,32,10,13,0,32,0,65,-124,-64,0,106,34,13,40,2,0,13,0,32,1,65,-128,-64,0,54,2,0,32,13,32,0,54,2,0,11,32,2,65,4,106,33,10,3,64,2,64,32,1,40,2,8,34,13,32,10,106,32,1,40,2,0,75,13,0,32,1,40,2,4,32,13,106,34,13,32,13,40,2,0,65,-128,-128,-128,-128,120,113,32,2,114,54,2,0,32,1,65,8,106,34,1,32,1,40,2,0,32,10,106,54,2,0,32,13,32,13,40,2,0,65,-128,-128,-128,-128,120,114,54,2,0,32,13,65,4,106,34,1,13,3,11,32,0,16,19,34,1,13,0,11,11,65,-4,-1,-1,-1,7,32,2,107,33,4,32,0,65,-56,-63,0,106,33,11,32,0,65,-64,-63,0,106,33,12,32,0,40,2,-56,65,34,3,33,13,3,64,32,0,32,13,65,12,108,106,34,1,65,-120,-64,0,106,40,2,0,32,1,65,-128,-64,0,106,34,5,40,2,0,70,65,-32,-62,0,16,2,32,1,65,-124,-64,0,106,40,2,0,34,6,65,4,106,33,13,3,64,32,6,32,5,40,2,0,106,33,7,32,13,65,124,106,34,8,40,2,0,34,9,65,-1,-1,-1,-1,7,113,33,1,2,64,32,9,65,0,72,13,0,2,64,32,1,32,2,79,13,0,3,64,32,13,32,1,106,34,10,32,7,79,13,1,32,10,40,2,0,34,10,65,0,72,13,1,32,1,32,10,65,-1,-1,-1,-1,7,113,106,65,4,106,34,1,32,2,73,13,0,11,11,32,8,32,1,32,2,32,1,32,2,73,27,32,9,65,-128,-128,-128,-128,120,113,114,54,2,0,2,64,32,1,32,2,77,13,0,32,13,32,2,106,32,4,32,1,106,65,-1,-1,-1,-1,7,113,54,2,0,11,32,1,32,2,79,13,4,11,32,13,32,1,106,65,4,106,34,13,32,7,73,13,0,11,65,0,33,1,32,11,65,0,32,11,40,2,0,65,1,106,34,13,32,13,32,12,40,2,0,70,27,34,13,54,2,0,32,13,32,3,71,13,0,11,11,32,1,15,11,32,8,32,8,40,2,0,65,-128,-128,-128,-128,120,114,54,2,0,32,13,15,11,65,0,11,-121,5,1,8,127,32,0,40,2,-60,65,33,1,2,64,2,64,65,0,45,0,-74,67,69,13,0,65,0,40,2,-72,67,33,7,12,1,11,63,0,33,7,65,0,65,1,58,0,-74,67,65,0,32,7,65,16,116,34,7,54,2,-72,67,11,32,7,33,3,2,64,2,64,2,64,2,64,32,7,65,-1,-1,3,106,65,16,118,34,2,63,0,34,8,77,13,0,32,2,32,8,107,64,0,26,65,0,33,8,32,2,63,0,71,13,1,65,0,40,2,-72,67,33,3,11,65,0,33,8,65,0,32,3,54,2,-72,67,32,7,65,0,72,13,0,32,0,32,1,65,12,108,106,33,2,32,7,65,-128,-128,4,65,-128,-128,8,32,7,65,-1,-1,3,113,34,8,65,-127,-8,3,73,34,6,27,106,32,8,32,7,65,-1,-1,7,113,32,6,27,107,32,7,107,33,7,2,64,65,0,45,0,-74,67,13,0,63,0,33,3,65,0,65,1,58,0,-74,67,65,0,32,3,65,16,116,34,3,54,2,-72,67,11,32,2,65,-128,-64,0,106,33,2,32,7,65,0,72,13,1,32,3,33,6,2,64,32,7,65,7,106,65,120,113,34,5,32,3,106,65,-1,-1,3,106,65,16,118,34,8,63,0,34,4,77,13,0,32,8,32,4,107,64,0,26,32,8,63,0,71,13,2,65,0,40,2,-72,67,33,6,11,65,0,32,6,32,5,106,54,2,-72,67,32,3,65,127,70,13,1,32,0,32,1,65,12,108,106,34,1,65,-124,-64,0,106,40,2,0,34,6,32,2,40,2,0,34,8,106,32,3,70,13,2,2,64,32,8,32,1,65,-120,-64,0,106,34,5,40,2,0,34,1,70,13,0,32,6,32,1,106,34,6,32,6,40,2,0,65,-128,-128,-128,-128,120,113,65,124,32,1,107,32,8,106,114,54,2,0,32,5,32,2,40,2,0,54,2,0,32,6,32,6,40,2,0,65,-1,-1,-1,-1,7,113,54,2,0,11,32,0,65,-60,-63,0,106,34,2,32,2,40,2,0,65,1,106,34,2,54,2,0,32,0,32,2,65,12,108,106,34,0,65,-124,-64,0,106,32,3,54,2,0,32,0,65,-128,-64,0,106,34,8,32,7,54,2,0,11,32,8,15,11,2,64,32,2,40,2,0,34,8,32,0,32,1,65,12,108,106,34,3,65,-120,-64,0,106,34,1,40,2,0,34,7,70,13,0,32,3,65,-124,-64,0,106,40,2,0,32,7,106,34,3,32,3,40,2,0,65,-128,-128,-128,-128,120,113,65,124,32,7,107,32,8,106,114,54,2,0,32,1,32,2,40,2,0,54,2,0,32,3,32,3,40,2,0,65,-1,-1,-1,-1,7,113,54,2,0,11,32,0,32,0,65,-60,-63,0,106,34,7,40,2,0,65,1,106,34,3,54,2,-64,65,32,7,32,3,54,2,0,65,0,15,11,32,2,32,8,32,7,106,54,2,0,32,2,11,123,1,3,127,2,64,2,64,32,0,69,13,0,65,0,40,2,-56,66,34,2,65,1,72,13,0,65,-120,-63,0,33,3,32,2,65,12,108,65,-120,-63,0,106,33,1,3,64,32,3,65,4,106,40,2,0,34,2,69,13,1,2,64,32,2,65,4,106,32,0,75,13,0,32,2,32,3,40,2,0,106,32,0,75,13,3,11,32,3,65,12,106,34,3,32,1,73,13,0,11,11,15,11,32,0,65,124,106,34,3,32,3,40,2,0,65,-1,-1,-1,-1,7,113,54,2,0,11,3,0,0,11,11,-35,1,7,0,65,4,11,4,-64,73,0,0,0,65,16,11,8,111,110,101,114,114,111,114,0,0,65,32,11,6,101,111,115,105,111,0,0,65,48,11,64,111,110,101,114,114,111,114,32,97,99,116,105,111,110,39,115,32,97,114,101,32,111,110,108,121,32,118,97,108,105,100,32,102,114,111,109,32,116,104,101,32,34,101,111,115,105,111,34,32,115,121,115,116,101,109,32,97,99,99,111,117,110,116,0,0,65,-16,0,11,5,114,101,97,100,0,0,65,-128,1,11,8,72,101,108,108,111,44,32,0,0,65,-32,-62,0,11,86,109,97,108,108,111,99,95,102,114,111,109,95,102,114,101,101,100,32,119,97,115,32,100,101,115,105,103,110,101,100,32,116,111,32,111,110,108,121,32,98,101,32,99,97,108,108,101,100,32,97,102,116,101,114,32,95,104,101,97,112,32,119,97,115,32,99,111,109,112,108,101,116,101,108,121,32,97,108,108,111,99,97,116,101,100,0 };

using namespace appbase;

namespace koinos::plugins::block_producer {

    class block_producer_plugin : public appbase::plugin< block_producer_plugin >
    {
       public:
          block_producer_plugin();
          virtual ~block_producer_plugin();

          APPBASE_PLUGIN_REQUIRES( (plugins::chain::chain_plugin) );

          static const std::string& name() { static std::string name = KOINOS_BLOCK_PRODUCER_PLUGIN_NAME; return name; }

          std::shared_ptr<protocol::block_header> produce_block();

          virtual void set_program_options( options_description&, options_description& ) override {}

          virtual void plugin_initialize( const variables_map& options ) override;
          virtual void plugin_startup() override;
          virtual void plugin_shutdown() override;

          void demo_create_contract(protocol::active_block_data& active_data);
          void demo_call_contract(protocol::active_block_data& active_data);

          void start_block_production();
          void stop_block_production();

          // Whether or not we should be producing blocks
          // stop_block_production uses this to shut down the production thread
          bool producing_blocks = false;
          crypto::private_key block_signing_private_key;

          std::shared_ptr< std::thread > block_production_thread;
    };
}
